#!/bin/bash
#set -e
##################################################################################################################
# Author    : Erik Dubois
# Website   : https://www.erikdubois.be
# Website   : https://www.alci.online
# Website   : https://www.arcolinux.info
# Website   : https://www.arcolinux.com
# Website   : https://www.arcolinuxd.com
# Website   : https://www.arcolinuxb.com
# Website   : https://www.arcolinuxiso.com
# Website   : https://www.arcolinuxforum.com
##################################################################################################################
#
#   DO NOT JUST RUN THIS. EXAMINE AND JUDGE. RUN AT YOUR OWN RISK.
#
##################################################################################################################
#tput setaf 0 = black 
#tput setaf 1 = red 
#tput setaf 2 = green
#tput setaf 3 = yellow 
#tput setaf 4 = dark blue 
#tput setaf 5 = purple
#tput setaf 6 = cyan 
#tput setaf 7 = gray 
#tput setaf 8 = light blue
##################################################################################################################

# Disclaimer message
tput setaf 3;
echo "NO WARRANTY"
echo
echo "THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,"
echo "EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF"
echo "MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, AND"
echo "NONINFRINGEMENT."
echo "IN NO EVENT SHALL THE AUTHORS, COPYRIGHT HOLDERS, OR CONTRIBUTORS BE"
echo "LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY, WHETHER IN AN"
echo "ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF, OR IN"
echo "CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE"
echo "SOFTWARE."
echo "NO WARRANTY OR ASSURANCE, EITHER EXPRESS OR IMPLIED, IS MADE WITH"
echo "RESPECT TO THE PRODUCT PROVIDED UNDER OR BY VIRTUE OF THIS"
echo "AGREEMENT, INCLUDING, BUT NOT LIMITED TO, ANY IMPLIED WARRANTY OF"
echo "MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR"
echo "NON-INFRINGEMENT."
echo "NO WARRANTY IS GIVEN THAT THE SOFTWARE OR SERVICE WILL BE"
echo "ERROR-FREE, PERFORM IN AN UNINTERRUPTED MANNER, OR THAT ANY DEFECTS"
echo "OR ERRORS IN THE SOFTWARE OR SERVICE WILL BE CORRECTED."
echo "THE USER ASSUMES ALL RISKS AND RESPONSIBILITY FOR THE SELECTION OF"
echo "THE SOFTWARE TO ACHIEVE THEIR INTENDED RESULTS, AND FOR THE"
echo "INSTALLATION, USE, AND RESULTS OBTAINED FROM IT."
echo
echo "DISCLAIMER:"
echo "This script assists in changing the boot manager from GRUB to"
echo "either systemd-boot or rEFInd."
echo "Modifying your system's boot manager and configurations can be"
echo "hazardous and may result in a non-bootable system if not"
echo "executed correctly."
echo
echo "It is strongly recommended to have a full system backup and"
echo "a live USB available for system repair in case of any issues."
echo
echo "Do you wish to continue?"

# User confirmation
read -r -p "Please confirm with [Y/N]: " response
case "$response" in
    [yY][eE][sS]|[yY]) 
        echo "Proceeding with the boot manager change..."
        ;;
    *)
        echo "Operation cancelled by the user. Exiting script."
        exit 1
        ;;
esac
tput sgr0

if lsblk | grep -q "/boot/efi" ; then
    echo "/boot/efi is mounted."

	Online=0

	function check_connectivity() {

	    local test_ip
	    local test_count

	    test_ip="8.8.8.8"
	    test_count=1

	    if ping -c ${test_count} ${test_ip} > /dev/null; then
	       echo "You have internet connectivity"
	       Online=1
	    else
	       echo "You do not have internet connectivity"
	       Online=0
	    fi
	 }

	check_connectivity

	# if not online
	if [ $Online -eq 0 ] ; then
		echo
		echo "###############################################################################"
		echo "###                          YOU ARE NOT ONLINE                            ####"
		echo "###         WE ARE PINGING 8.8.8.8 TO TEST YOUR INTERNET CONNECTION        ####"
		echo "###                     WE NEED INTERNET AN CONNECTION                     ####"
		echo "###############################################################################"
		exit 1
	fi

	#function to check if a package is installed
	is_package_installed() {
	    if pacman -Q "$1" &> /dev/null; then
	        echo "Package $1 is installed."
	        return 0  # Success
	    else
	        echo "Package $1 is not installed."
	        return 1  # Failure
	    fi
	}

	echo "###############################################################################"
	echo "Removing other bootloaders"
	echo "###############################################################################"

	#GRUB GONE
	if is_package_installed arcolinux-bootloader-grub-git; then
	    echo "Removing arcolinux-bootloader-grub-git..."
	    sudo pacman -R arcolinux-bootloader-grub-git --noconfirm
	else
	    echo "Arcolinux-bootloader-grub-git is not installed, no need to remove."
	fi

	if is_package_installed arcolinux-grub-theme-vimix-git; then
	    echo "Removing arcolinux-grub-theme-vimix-git..."
	    sudo pacman -R arcolinux-grub-theme-vimix-git --noconfirm
	else
	    echo "Arcolinux-grub-theme-vimix-git is not installed, no need to remove."
	fi

	#keep last
	if is_package_installed grub; then
	    echo "Removing grub..."
	    sudo pacman -R grub --noconfirm
	else
	    echo "Grub is not installed, no need to remove."
	fi

	if [ -d /boot/grub ]; then
		sudo rm -r /boot/grub
	fi

	if [ -f /etc/default/grub ]; then
		sudo rm /etc/default/grub*
	fi

	#REFIND GONE
	if is_package_installed arcolinux-bootloader-refind-git; then
	    echo "Removing arcolinux-bootloader-refind-git..."
	    sudo pacman -R arcolinux-bootloader-refind-git --noconfirm
	else
	    echo "Arcolinux-bootloader-refind-git is not installed, no need to remove."
	fi

	if is_package_installed arcolinux-refind-theme-arco-specs-git; then
	    echo "Removing arcolinux-refind-theme-arco-specs-git..."
	    sudo pacman -R arcolinux-refind-theme-arco-specs-git --noconfirm
	else
	    echo "Arcolinux-refind-theme-arco-git is not installed, no need to remove."
	fi

	#keep last
	if is_package_installed refind; then
	    echo "Removing refind..."
	    sudo pacman -R refind --noconfirm
	else
	    echo "Refind is not installed, no need to remove."
	fi

	echo "###############################################################################"
	echo "Installing the default systemd-boot from ArcoLinux"
	echo "###############################################################################"

	#REFIND GONE
	if is_package_installed kernel-install-mkinitcpio; then
	    echo "Removing kernel-install-mkinitcpio..."
	    sudo pacman -R kernel-install-mkinitcpio --noconfirm
	else
	    echo "Kernel-install-mkinitcpio is not installed, no need to remove."
	fi

	#sudo pacman -S --noconfirm kernel-install-mkinitcpio
	sudo pacman -S --noconfirm pacman-hook-kernel-install
	sudo pacman -S --noconfirm arcolinux-bootloader-systemd-boot-git

	sudo bootctl install

# Read the Linux version info from /proc/version
version_info=$(cat /proc/version)

# Check if the version info starts with 'Linux'
if [[ $version_info == Linux* ]]; then
    echo "Confirmed: The version info starts with 'Linux'."

    # Using a case structure to match version info
    case "$version_info" in
      *linux-zen*)
        # Check if linux-zen-headers is already installed
        if pacman -Q linux-zen-headers &> /dev/null; then
            echo "'Linux-zen-headers' is installed. Reinstalling 'linux-zen-headers' along with 'linux-zen'..."
            sudo pacman -S linux-zen linux-zen-headers --noconfirm
        else
            echo "'zen-headers' is not installed. Installing 'linux-zen'..."
            sudo pacman -S linux-zen --noconfirm
        fi
        ;;
      *linux-hardened*)
        # Check if linux-hardened-headers is already installed
        if pacman -Q linux-hardened-headers &> /dev/null; then
            echo "'Linux-hardened-headers' is installed. Reinstalling 'linux-hardened-headers' along with 'linux-hardened'..."
            sudo pacman -S linux-hardened linux-hardened-headers --noconfirm
        else
            echo "'linux-hardened-headers' is not installed. Installing 'linux-hardened'..."
            sudo pacman -S linux-hardened --noconfirm
        fi
        ;;
      *linux-lts*)
        # Check if linux-lts-headers is already installed
        if pacman -Q linux-lts-headers &> /dev/null; then
            echo "'Linux-lts-headers' is installed. Reinstalling 'linux-lts-headers' along with 'linux-lts'..."
            sudo pacman -S linux-lts linux-lts-headers --noconfirm
        else
            echo "'linux-lts-headers' is not installed. Installing 'linux-lts'..."
            sudo pacman -S linux-lts --noconfirm
        fi
        ;;
      *xanmod*lts*)
        # Check if linux-xanmod-lts-headers is already installed
        if pacman -Q linux-xanmod-lts-headers &> /dev/null; then
            echo "'Linux-xanmod-lts-headers' is installed. Reinstalling 'linux-xanmod-lts-headers' along with 'linux-xanmod-lts'..."
            sudo pacman -S linux-xanmod-lts linux-xanmod-lts-headers --noconfirm
        else
            echo "'linux-xanmod-lts-headers' is not installed. Installing 'linux-xanmod-lts'..."
            sudo pacman -S linux-xanmod-lts --noconfirm
        fi
        ;;
      *xanmod*)
        # Check if linux-xanmod-headers is already installed
        if pacman -Q linux-xanmod-headers &> /dev/null; then
            echo "'Linux-xanmod-headers' is installed. Reinstalling 'linux-xanmod-headers' along with 'linux-xanmod'..."
            sudo pacman -S linux-xanmod linux-xanmod-headers --noconfirm
        else
            echo "'linux-xanmod-headers' is not installed. Installing 'linux-xanmod'..."
            sudo pacman -S linux-xanmod --noconfirm
        fi
        ;;
      *linux-rt-lts*)
        # Check if linux-rt-lts-headers is already installed
        if pacman -Q linux-rt-lts-headers &> /dev/null; then
            echo "'linux-rt-lts-headers' is installed. Reinstalling 'linux-rt-lts-headers' along with 'linux-rt-lts'..."
            sudo pacman -S linux-rt-lts linux-rt-lts-headers --noconfirm
        else
            echo "'linux-rt-lts-headers' is not installed. Installing 'linux-rt-lts'..."
            sudo pacman -S linux-rt-lts --noconfirm
        fi
        ;;
      *linux-rt*)
        # Check if linux-linux-rt-headers is already installed
        if pacman -Q linux-rt-headers &> /dev/null; then
            echo "'Linux-rt-headers' is installed. Reinstalling 'linux-rt-headers' along with 'linux-rt'..."
            sudo pacman -S linux-rt linux-rt-headers --noconfirm
        else
            echo "'linux-rt-headers' is not installed. Installing 'linux-rt'..."
            sudo pacman -S linux-rt --noconfirm
        fi
        ;;

      *linux*)
        echo "Specific kernel version not detected, checking for standard Linux headers..."
        if pacman -Q linux-headers &> /dev/null; then
            echo "'Linux-headers' is installed. Reinstalling 'linux' along with 'linux-headers'..."
            sudo pacman -S linux linux-headers --noconfirm
        else
            echo "'Linux-headers' is not installed. Installing 'linux'..."
            sudo pacman -S linux --noconfirm
        fi
        ;;
      *)
        echo "We did not find the name of your kernel..."
        echo "Re-install your kernel manually!"
        ;;
    esac
else
    echo "Error: The version info does not start with 'Linux'."
fi

	if [[ -f /boot/efi/loader/loader.conf ]];then
		sudo sed -i "s/#timeout 3/timeout 3/g" /boot/efi/loader/loader.conf
	fi

	if [[ -f /boot/efi/loader/loader.conf ]];then
		sudo sed -i "s/#console-mode keep/console-mode keep/g" /boot/efi/loader/loader.conf
	fi

	if [ -f /usr/share/wayland-sessions/hyprland.desktop ] || [ -f /usr/share/wayland-sessions/sway.desktop ] || [ -f /usr/share/wayland-sessions/wayfire.desktop ]; then
		sudo /usr/local/bin/arcolinux-nvidia-drm-wayland
	fi

	echo "systemd-boot" | sudo dd of="/bootloader"

	echo
	echo "###############################################################################"
	echo "###                DONE - YOU CAN CLOSE THIS WINDOW                        ####"
	echo "###############################################################################"

else

	echo
	echo "###############################################################################"
	echo "###                YOU CAN NOT USE SYSTEMD-BOOT                         ####"
	echo "###                        KEEP USING GRUB                                 ####"
	echo "###        https://wiki.archlinux.org/title/Arch_boot_process              ####"
	echo "###############################################################################"
fi
