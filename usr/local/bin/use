#!/bin/bash
#set -e
##################################################################################################################
# Author    : Erik Dubois
# Website   : https://www.erikdubois.be
# Website   : https://www.alci.online
# Website   : https://www.arcolinux.info
# Website   : https://www.arcolinux.com
# Website   : https://www.arcolinuxd.com
# Website   : https://www.arcolinuxb.com
# Website   : https://www.arcolinuxiso.com
# Website   : https://www.arcolinuxforum.com
##################################################################################################################
#
#   DO NOT JUST RUN THIS. EXAMINE AND JUDGE. RUN AT YOUR OWN RISK.
#
##################################################################################################################
#tput setaf 0 = black 
#tput setaf 1 = red 
#tput setaf 2 = green
#tput setaf 3 = yellow 
#tput setaf 4 = dark blue 
#tput setaf 5 = purple
#tput setaf 6 = cyan 
#tput setaf 7 = gray 
#tput setaf 8 = light blue
##################################################################################################################
# Function to restart the script with sudo
restart_with_sudo() {
    tput setaf 3
    echo
    echo "This script needs to be run with superuser rights."
    echo "Please restart the script with 'sudo' rights by typing:"
    echo "sudo $0"
    echo
    tput sgr0
    exit 1

}

# Check if running as root
if [ "$(id -u)" -ne 0 ]; then
    restart_with_sudo
fi

clear
tput setaf 9
echo "----------------------------------------------------"
tput sgr0;echo "Iso";tput setaf 9
echo "----------------------------------------------------"
cat /etc/dev-rel
echo "----------------------------------------------------"
tput sgr0;echo "BIOS or UEFI";tput setaf 9
echo "----------------------------------------------------"
if [ -d /sys/firmware/efi ]; then
    echo "uefi"
else
    echo "bios"
fi
echo "----------------------------------------------------"
tput sgr0;echo "X11 sessions";tput setaf 9
echo "----------------------------------------------------"
ls /usr/share/xsessions
echo "----------------------------------------------------"
tput sgr0;echo "Wayland sessions";tput setaf 9
echo "----------------------------------------------------"
ls /usr/share/wayland-sessions
echo "----------------------------------------------------"
tput sgr0;echo "Boot system";tput setaf 9
echo "----------------------------------------------------"
sed '2d' /bootloader
echo "----------------------------------------------------"
tput sgr0;echo "Kernels";tput setaf 9
echo "----------------------------------------------------"
ls /usr/lib/modules
echo "----------------------------------------------------"
tput sgr0;echo "Kernel in use";tput setaf 9
echo "----------------------------------------------------"
cat /proc/version
echo "----------------------------------------------------"
tput sgr0
# List of potential display managers
display_managers=("sddm" "lxdm" "gdm" "lightdm" "ly")

# Loop through each display manager and check its status
for dm in "${display_managers[@]}"; do
    if systemctl is-active --quiet "$dm"; then
        echo "Active display manager"
		tput setaf 9;echo "----------------------------------------------------"
        echo $dm
		echo "----------------------------------------------------";tput sgr0
    fi
done

tput sgr0;echo "Nvidia packages installed";tput setaf 9
echo "----------------------------------------------------"
check_nvidia_packages() {
    local nvidia_packages=$(pacman -Q | grep -i nvidia)

    if [ -z "$nvidia_packages" ]; then
        echo "No NVIDIA packages are installed."
    else
        echo "$nvidia_packages"
    fi
}
check_nvidia_packages
echo "----------------------------------------------------"
tput sgr0;echo "Nvidia-drm.modeset=...";tput setaf 9
echo "----------------------------------------------------"
# Define paths to configuration files
GRUB_CONFIG="/etc/default/grub"
SYSTEMD_BOOT_CONFIG="/boot/efi/loader/entries/*.conf"
REFIND_CONFIG="/boot/refind_linux.conf"

# Function to check for nvidia-drm.modeset=1 in a file
check_modeset() {
    if grep -q "nvidia-drm.modeset=1" "$1"; then
        echo "nvidia-drm.modeset=1 found in $1"
    else
        echo "nvidia-drm.modeset=1 NOT found in $1"
    fi
}

# Check GRUB configuration
if [ -f "$GRUB_CONFIG" ]; then
    check_modeset "$GRUB_CONFIG"
fi

# Check systemd-boot configuration
for file in $SYSTEMD_BOOT_CONFIG; do
    if [ -f "$file" ]; then
        check_modeset "$file"
    fi
done

# Check rEFInd configuration
if [ -f "$REFIND_CONFIG" ]; then
    check_modeset "$REFIND_CONFIG"
fi

echo "----------------------------------------------------";tput sgr0
# Function to check if NVIDIA driver is in use
check_nvidia_driver() {
    # Checking for NVIDIA in the list of PCI devices
    if lspci -nnk | grep -i nvidia | grep -qi 'kernel driver in use'; then
        echo "NVIDIA driver is currently in use."
    else
        echo "NVIDIA driver is not in use."
    fi
}

# Execute the function
check_nvidia_driver
tput setaf 9;echo "----------------------------------------------------"
echo "/etc/mkinitcpio.conf"
echo "----------------------------------------------------";tput sgr0

grep "^MODULES=(.*)" /etc/mkinitcpio.conf;tput setaf 9
tput setaf 9;echo "----------------------------------------------------";tput sgr0

echo "Use 'arcolinux-nvidia-drm-toggle' to add or remove nvidia-drm.modeset=1"
echo "for any bootloader for nvidia cards only"

echo
echo "###############################################################################"
echo "###                DONE - YOU CAN CLOSE THIS WINDOW                        ####"
echo "###############################################################################"
